"use strict";(self.webpackChunk_zendesk_laika_docs=self.webpackChunk_zendesk_laika_docs||[]).push([[634],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),u=r,m=c["".concat(o,".").concat(u)]||c[u]||k[u]||i;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4343:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),l=["components"],p={id:"Laika.InterceptApi",title:"Class: InterceptApi",sidebar_label:"Laika.InterceptApi",custom_edit_url:null},o=void 0,s={unversionedId:"api/classes/Laika.InterceptApi",id:"api/classes/Laika.InterceptApi",isDocsHomePage:!1,title:"Class: InterceptApi",description:"Laika.InterceptApi",source:"@site/docs/api/classes/Laika.InterceptApi.md",sourceDirName:"api/classes",slug:"/api/classes/Laika.InterceptApi",permalink:"/laika/docs/api/classes/Laika.InterceptApi",editUrl:null,tags:[],version:"current",frontMatter:{id:"Laika.InterceptApi",title:"Class: InterceptApi",sidebar_label:"Laika.InterceptApi",custom_edit_url:null},sidebar:"default",previous:{title:"Laika.Laika",permalink:"/laika/docs/api/classes/Laika.Laika-1"},next:{title:"Laika.LogApi",permalink:"/laika/docs/api/classes/Laika.LogApi"}},d=[{value:"Properties",id:"properties",children:[{value:"calls",id:"calls",children:[{value:"Defined in",id:"defined-in",children:[],level:4}],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"allowNetworkFallback",id:"allownetworkfallback",children:[{value:"Returns",id:"returns",children:[],level:4},{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"disableNetworkFallback",id:"disablenetworkfallback",children:[{value:"Returns",id:"returns-1",children:[],level:4},{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3},{value:"fireSubscriptionUpdate",id:"firesubscriptionupdate",children:[{value:"Parameters",id:"parameters",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"Defined in",id:"defined-in-3",children:[],level:4}],level:3},{value:"mockReset",id:"mockreset",children:[{value:"Returns",id:"returns-3",children:[],level:4},{value:"Defined in",id:"defined-in-4",children:[],level:4}],level:3},{value:"mockRestore",id:"mockrestore",children:[{value:"Returns",id:"returns-4",children:[],level:4},{value:"Defined in",id:"defined-in-5",children:[],level:4}],level:3},{value:"mockResult",id:"mockresult",children:[{value:"Parameters",id:"parameters-1",children:[],level:4},{value:"Returns",id:"returns-5",children:[],level:4},{value:"Defined in",id:"defined-in-6",children:[],level:4}],level:3},{value:"mockResultOnce",id:"mockresultonce",children:[{value:"Parameters",id:"parameters-2",children:[],level:4},{value:"Returns",id:"returns-6",children:[],level:4},{value:"Defined in",id:"defined-in-7",children:[],level:4}],level:3},{value:"onSubscribe",id:"onsubscribe",children:[{value:"Parameters",id:"parameters-3",children:[],level:4},{value:"Returns",id:"returns-7",children:[],level:4},{value:"Defined in",id:"defined-in-8",children:[],level:4}],level:3},{value:"waitForActiveSubscription",id:"waitforactivesubscription",children:[{value:"Returns",id:"returns-8",children:[],level:4},{value:"Defined in",id:"defined-in-9",children:[],level:4}],level:3},{value:"waitForNextSubscription",id:"waitfornextsubscription",children:[{value:"Returns",id:"returns-9",children:[],level:4},{value:"Defined in",id:"defined-in-10",children:[],level:4}],level:3}],level:2}],k={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../modules/Laika"},"Laika"),".InterceptApi"),(0,i.kt)("p",null,"This is the mocking API that is returned after running ",(0,i.kt)("a",{parentName:"p",href:"Laika.Laika-1#intercept"},(0,i.kt)("inlineCode",{parentName:"a"},"intercept()"))," on the ",(0,i.kt)("a",{parentName:"p",href:"../modules/Laika"},"Laika"),"."),(0,i.kt)("p",null,"The API is chainable, with the exception of ",(0,i.kt)("inlineCode",{parentName:"p"},"mockRestore()"),"."),(0,i.kt)("p",null,"Inspired by ",(0,i.kt)("inlineCode",{parentName:"p"},"jest.fn()"),"."),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"calls"},"calls"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"calls"),": readonly ",(0,i.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),">","[]"),(0,i.kt)("p",null,"An array containing the ",(0,i.kt)("inlineCode",{parentName:"p"},"variables")," from subsequent operations that passed through this intercept."),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"jest.fn().mock.calls"),"."),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L816"},"src/laika.ts:816")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"allownetworkfallback"},"allowNetworkFallback"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"allowNetworkFallback"),"(): ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("p",null,"This restores the default behavior: both queries and mutations\nwill be passed to future links (e.g. your backend) and back to the components."),(0,i.kt)("p",null,"Does not affect ",(0,i.kt)("inlineCode",{parentName:"p"},"subscription")," operations which will not reach the backend regardless of this setting (unless the ",(0,i.kt)("inlineCode",{parentName:"p"},"connectFutureLinksOrMitmFn")," argument was set)."),(0,i.kt)("p",null,"Opposite of ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi#disablenetworkfallback"},(0,i.kt)("inlineCode",{parentName:"a"},"disableNetworkFallback()")),"."),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L951"},"src/laika.ts:951")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"disablenetworkfallback"},"disableNetworkFallback"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"disableNetworkFallback"),"(): ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("p",null,'If you invoke this and do not setup any mocked results, your intercepted queries will not respond,\ni.e. hang in a "loading" state, until you fire the data event manually\n(e.g. in a custom callback defined in ',(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi#onsubscribe"},(0,i.kt)("inlineCode",{parentName:"a"},"onSubscribe(callback)")),"."),(0,i.kt)("p",null,"Does not affect ",(0,i.kt)("inlineCode",{parentName:"p"},"subscription")," operations which will not reach the backend regardless of this setting (unless the ",(0,i.kt)("inlineCode",{parentName:"p"},"connectFutureLinksOrMitmFn")," argument was set)."),(0,i.kt)("p",null,"Opposite of ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi#allownetworkfallback"},(0,i.kt)("inlineCode",{parentName:"a"},"allowNetworkFallback()")),"."),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L942"},"src/laika.ts:942")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"firesubscriptionupdate"},"fireSubscriptionUpdate"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"fireSubscriptionUpdate"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"resultOrFn"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fireMatcher?"),"): ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi"},(0,i.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,i.kt)("p",null,"Push data to an already active ",(0,i.kt)("inlineCode",{parentName:"p"},"subscription"),"-type operation.\nWill throw if there are no subscribers (e.g. active ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," hooks)."),(0,i.kt)("p",null,"Works similarly to ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi#mockresult"},(0,i.kt)("inlineCode",{parentName:"a"},"mockResult(...)")),", but the listener\nis being fed the new data upon execution."),(0,i.kt)("p",null,"Combine with ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi#waitforactivesubscription"},(0,i.kt)("inlineCode",{parentName:"a"},"waitForActiveSubscription()")),"\nto ensure a subscription is active before calling."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example")),"\nPush new information to a live feed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getActiveUsersCount'});\nawait intercept.waitForActiveSubscription();\nintercept.fireSubscriptionUpdate(\n  {result: {data: {count: 10}}},\n);\n// e.g. assert the count displayed on the page is in fact 10\nintercept.fireSubscriptionUpdate(\n  {result: {data: {count: 0}}},\n);\n// e.g. assert the page shows \"there are no active users currently on the page\"\n")),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"resultOrFn")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../modules/typedefs#resultorfn"},(0,i.kt)("inlineCode",{parentName:"a"},"ResultOrFn"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"[","[include:result-or-fn.md]","]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"fireMatcher?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../modules/typedefs#matcher"},(0,i.kt)("inlineCode",{parentName:"a"},"Matcher"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"[","[include:mock-matcher.md]","]")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi"},(0,i.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L924"},"src/laika.ts:924")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"mockreset"},"mockReset"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"mockReset"),"(): ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi"},(0,i.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,i.kt)("p",null,"Resets the mock configuration to its initial state and reenables the intercept if disabled by ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi#mockrestore"},(0,i.kt)("inlineCode",{parentName:"a"},"mockRestore()")),"."),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi"},(0,i.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,i.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L955"},"src/laika.ts:955")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"mockrestore"},"mockRestore"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"mockRestore"),"(): ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("p",null,"Removes the intercept completely and re-establishes connectivity in current and ",(0,i.kt)("em",{parentName:"p"},"future")," intercepted operations.\nNote the word ",(0,i.kt)("em",{parentName:"p"},"future"),". Any connections that were established prior to running this command,\nwill not automatically switch over to other mocks. This will mostly affect subscriptions.\nIdeally, keep a reference to the original intercept throughout the duration of your session\nand simply ",(0,i.kt)("inlineCode",{parentName:"p"},"intercept.reset()")," if you need to restore connectivity or setup a different scenario."),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L963"},"src/laika.ts:963")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"mockresult"},"mockResult"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"mockResult"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"resultOrFn"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"matcher?"),"): ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi"},(0,i.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,i.kt)("p",null,"Sets the mock data that will be used as a default response to intercepted queries and mutations.\nIf used for subscriptions, will push data immediately."),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"jest.fn().mockReturnValue(...)"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example")),"\nAlways respond with the mock to all queries/mutations intercepted"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getUsers'});\nintercept.mockResult(\n  {result: {data: {users: [{id: 1, name: 'Mouse'}, {id: 2, name: 'Bamboo'}]}}},\n);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example")),"\nRespond with an error, but only when the operations's variables contain ",(0,i.kt)("inlineCode",{parentName:"p"},"{userGroup: 'elephants'}")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getUsers'});\nintercept.mockResult(\n  {error: new Error(`oops, server blew up from all the elephants stomping!`)},\n  {variables: {userGroup: 'elephants'}}\n);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example")),"\nRespond with a customized error based on the variables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getUsers'});\nintercept.mockResult(\n  ({variables}) => ({error: new Error(`oops, server blew up from all the ${variables.userGroup} stomping!`)})\n);\n")),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"resultOrFn")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../modules/typedefs#resultorfn"},(0,i.kt)("inlineCode",{parentName:"a"},"ResultOrFn"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"[","[include:result-or-fn.md]","]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"matcher?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../modules/typedefs#matcher"},(0,i.kt)("inlineCode",{parentName:"a"},"Matcher"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"[","[include:mock-matcher.md]","]")))),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi"},(0,i.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,i.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L851"},"src/laika.ts:851")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"mockresultonce"},"mockResultOnce"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"mockResultOnce"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"resultOrFn"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"matcher?"),"): ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi"},(0,i.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,i.kt)("p",null,"Sets the mock data that will be used as the ",(0,i.kt)("em",{parentName:"p"},"next")," response to matching intercepted queries/mutations.\nIf used for subscription operations, will immediately push provided data to the next matching request.\nWorks the same as ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi#mockresult"},(0,i.kt)("inlineCode",{parentName:"a"},"mockResult")),",\nexcept that as soon as a matching result is found in the queue of mocks, it will not be sent again."),(0,i.kt)("p",null,"Can be run multiple times and will send responses in order in which ",(0,i.kt)("inlineCode",{parentName:"p"},"mockResultOnce")," was called."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"example")),"\nRespond with the mock to the first intercepted operation with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"getUsers"),",\nthen with a different mock the second time that operation is intercepted."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const intercept = laika.intercept({operationName: 'getUsers'});\nintercept\n  .mockResultOnce(\n    {result: {data: {users: [{id: 1, name: 'Mouse'}, {id: 2, name: 'Bamboo'}]}}},\n  );\n  .mockResultOnce(\n    {result: {data: {users: [{id: 9, name: 'Ox'}, {id: 10, name: 'Fox'}]}}},\n  );\n")),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"resultOrFn")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../modules/typedefs#resultorfn"},(0,i.kt)("inlineCode",{parentName:"a"},"ResultOrFn"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"[","[include:result-or-fn.md]","]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"matcher?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../modules/typedefs#matcher"},(0,i.kt)("inlineCode",{parentName:"a"},"Matcher"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"[","[include:mock-matcher.md]","]")))),(0,i.kt)("h4",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi"},(0,i.kt)("inlineCode",{parentName:"a"},"InterceptApi"))),(0,i.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L879"},"src/laika.ts:879")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"onsubscribe"},"onSubscribe"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"onSubscribe"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"callback"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"void")," ","|"," () => ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("p",null,"Add a callback that will fire every time a component connects to the query (i.e. mounts).\nYou may return a clean-up function which will be run when the query disconnects."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"callback")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../modules/typedefs#onsubscribecallback"},(0,i.kt)("inlineCode",{parentName:"a"},"OnSubscribeCallback")))))),(0,i.kt)("h4",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")," ","|"," () => ",(0,i.kt)("inlineCode",{parentName:"p"},"void")),(0,i.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L932"},"src/laika.ts:932")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"waitforactivesubscription"},"waitForActiveSubscription"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"waitForActiveSubscription"),"(): ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,i.kt)("p",null,"In case of GraphQL subscriptions, will return synchronously if at least\none intercepted subscription is already active.\nIn other cases returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise")," and behaves the same way as ",(0,i.kt)("a",{parentName:"p",href:"Laika.InterceptApi#waitfornextsubscription"},(0,i.kt)("inlineCode",{parentName:"a"},"waitForNextSubscription()")),"."),(0,i.kt)("h4",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,i.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L888"},"src/laika.ts:888")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"waitfornextsubscription"},"waitForNextSubscription"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"waitForNextSubscription"),"(): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Object"),">"),(0,i.kt)("p",null,"Returns a Promise that will resolve when the ",(0,i.kt)("em",{parentName:"p"},"next")," operation is run.\nThis translates to whenever a query/mutation is run, or whenever the ",(0,i.kt)("em",{parentName:"p"},"next")," subscription is made."),(0,i.kt)("h4",{id:"returns-9"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"Object"),">"),(0,i.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zendesk/laika/blob/b5dd5a7/src/laika.ts#L893"},"src/laika.ts:893")))}c.isMDXComponent=!0}}]);